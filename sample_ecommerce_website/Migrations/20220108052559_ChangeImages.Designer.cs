// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sample_ecommerce_website.Models.DAL;

namespace sample_ecommerce_website.Migrations
{
    [DbContext(typeof(ProductDBModel))]
    [Migration("20220108052559_ChangeImages")]
    partial class ChangeImages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("sample_ecommerce_website.Models.Image", b =>
                {
                    b.Property<string>("ImageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageID = "1a70c6c0-95c3-46b7-a9a6-3abbc69ba1cf",
                            ImageURL = "https://ae01.alicdn.com/kf/HTB1ZZ8GKFXXXXb3aXXXq6xXFXXX0/Bayblades-Spinning-Top-METAL-FUSION-BB88-METEO-L-DRAGO-LW105LF-Launchers-L-R-Double.jpg",
                            ProductID = "7bfd10ec-b1da-4aca-9271-6731715455a5"
                        },
                        new
                        {
                            ImageID = "5fd6d1cc-6fe4-496f-8182-a264938eb7b6",
                            ImageURL = "https://ae01.alicdn.com/kf/HTB1IcGmcxiH3KVjSZPfq6xBiVXaO/oMoToys-Beyblades-Big-Bang-Pegasis-BB105-Metal-4D-System-Cosmic-Pegasus-F-D-with-Launcher-Pack.jpg_Q90.jpg_.webp",
                            ProductID = "40cdbf5b-9e8d-4a8f-aa6b-b74700a02453"
                        },
                        new
                        {
                            ImageID = "f81d5219-7f71-40d0-b4b1-5fb86c810c1f",
                            ImageURL = "http://images5.fanpop.com/image/photos/30900000/Random-4D-beyblades-beyblade-metal-fury-30966056-379-335.jpg",
                            ProductID = "052cab8c-985e-4818-8fb8-ffb5d4a10249"
                        },
                        new
                        {
                            ImageID = "ccba718f-eda0-4b15-95c4-3579cc655150",
                            ImageURL = "https://m.media-amazon.com/images/I/51v6c-NAPHL._AC_.jpg",
                            ProductID = "714e4da1-6b46-49df-87fb-7d20b55175a5"
                        },
                        new
                        {
                            ImageID = "eeef3006-2ada-4811-97fc-e4ca42e336a8",
                            ImageURL = "https://i5.walmartimages.com/asr/b2f830f2-c6df-4262-a764-ab65cccc2b2d.3e80a3fbe05918fe7e59e91b15e8ab2a.jpeg",
                            ProductID = "d549e4fe-bb29-476d-a3ae-c7533c44773c"
                        },
                        new
                        {
                            ImageID = "bf3be07b-d65e-4796-8aff-d2b9315fe9ec",
                            ImageURL = "https://i.ebayimg.com/00/s/MTE3NlgxMTc2/z/ZBsAAOSwWWxY-cVZ/$_12.JPG",
                            ProductID = "66b879cf-637f-4f29-843d-03a60e35d9e5"
                        },
                        new
                        {
                            ImageID = "951bc77e-9d11-4ffa-8452-e8185bcf6f08",
                            ImageURL = "https://cdn11.bigcommerce.com/s-iodt3qca/images/stencil/1280x1280/products/386/1664/DiabloNemesisTakara1NWM__38445.1587767442.jpg?c=2",
                            ProductID = "66b879cf-637f-4f29-843d-03a60e35d9e5"
                        },
                        new
                        {
                            ImageID = "2767d0eb-5ac0-4709-872c-107d6b05af76",
                            ImageURL = "https://cdn11.bigcommerce.com/s-iodt3qca/images/stencil/1280x1280/products/414/827/s-l1600__21220.1535822191.jpg?c=2",
                            ProductID = "66b879cf-637f-4f29-843d-03a60e35d9e5"
                        },
                        new
                        {
                            ImageID = "f1311d0c-78f1-492c-9f90-a5f9d62c988e",
                            ImageURL = "https://images-na.ssl-images-amazon.com/images/I/71k4SkSUIIL._AC_SL1500_.jpg",
                            ProductID = "464aa345-82ef-4e6b-98b4-ea5e6db4ac69"
                        },
                        new
                        {
                            ImageID = "194ac58f-c2a4-43b6-9d08-6a324a040350",
                            ImageURL = "https://i.ebayimg.com/images/g/jKQAAOSwc2dfbBIH/s-l640.jpg",
                            ProductID = "463005ef-ba02-4ac4-b369-eaf5db49b358"
                        });
                });

            modelBuilder.Entity("sample_ecommerce_website.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = "7bfd10ec-b1da-4aca-9271-6731715455a5",
                            Category = "Metal Fusion Beyblade",
                            Description = "Meteo L-Drago LW105LF",
                            Name = "Meteo L-Drago LW105LF",
                            Price = 69.989999999999995,
                            Stock = 4
                        },
                        new
                        {
                            ProductID = "40cdbf5b-9e8d-4a8f-aa6b-b74700a02453",
                            Category = "Metal Fusion Beyblade",
                            Description = "Cosmic Pegasus F:D",
                            Name = "Cosmic Pegasus F:D",
                            Price = 69.989999999999995,
                            Stock = 10
                        },
                        new
                        {
                            ProductID = "052cab8c-985e-4818-8fb8-ffb5d4a10249",
                            Category = "Metal Fusion Beyblade",
                            Description = "Fang Leone",
                            Name = "Fang Leone 130W2D",
                            Price = 69.989999999999995,
                            Stock = 3
                        },
                        new
                        {
                            ProductID = "714e4da1-6b46-49df-87fb-7d20b55175a5",
                            Category = "Metal Fusion Beyblade",
                            Description = "Blitz Striker 100RSF ",
                            DiscountID = "wqeqwrewtewtw",
                            Name = "Blitz Striker 100RSF",
                            Price = 69.989999999999995,
                            Stock = 0
                        },
                        new
                        {
                            ProductID = "d549e4fe-bb29-476d-a3ae-c7533c44773c",
                            Category = "Metal Fusion Beyblade",
                            Description = "Flame Libra T125ES ",
                            Name = "Flame Libra T125ES",
                            Price = 69.989999999999995,
                            Stock = 7
                        },
                        new
                        {
                            ProductID = "66b879cf-637f-4f29-843d-03a60e35d9e5",
                            Category = "Metal Fusion Beyblade",
                            Description = "Diablo Nemesis X:D",
                            Name = "Diablo Nemesis X:D",
                            Price = 69.989999999999995,
                            Stock = 9
                        },
                        new
                        {
                            ProductID = "464aa345-82ef-4e6b-98b4-ea5e6db4ac69",
                            Category = "Metal Fusion Beyblade",
                            Description = "Gravity Destroyer AD145WD",
                            Name = "Gravity Destroyer AD145WD",
                            Price = 69.989999999999995,
                            Stock = 2
                        },
                        new
                        {
                            ProductID = "463005ef-ba02-4ac4-b369-eaf5db49b358",
                            Category = "Metal Fusion Beyblade",
                            Description = "Hades Kerbecs BD145DS",
                            Name = "Hades Kerbecs BD145DS",
                            Price = 69.989999999999995,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sample_ecommerce_website.Models.Image", b =>
                {
                    b.HasOne("sample_ecommerce_website.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductID");
                });
#pragma warning restore 612, 618
        }
    }
}
